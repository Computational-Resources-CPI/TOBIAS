#----------------------------------------------------------------#
#---------------------------- Heatmaps --------------------------#
#----------------------------------------------------------------#
"""
#Heatmaps split in bound/unbound within conditions
rule plot_heatmaps_within:
	input:
		beds = expand(os.path.join(OUTPUTDIR, "TFBS", "{{TF}}", "beds", "{{TF}}_{{condition}}_{state}.bed"), state=["bound", "unbound"]),
		tracks = expand(os.path.join(OUTPUTDIR, "bias_correction", "{{condition}}_{track}.bw"), track=["uncorrected", "bias", "expected", "corrected"])
	output:
		heatmap = os.path.join(OUTPUTDIR, "TFBS", "{TF}", "plots", "{TF}_{condition}_heatmap.pdf")
	message: "Plotting heatmap for TF \"{wildcards.TF}\" within \"{wildcards.condition}\""
	params:
		"--TFBS_labels Bound Unbound",
		"--signal_labels " + " ".join(["uncorrected", "bias", "expected", "corrected"]),
		"--title '{TF} heatmap'",
	shell:
		"TOBIAS PlotHeatmap --TFBS {input.beds} --signals {input.tracks} --output {output.heatmap} {params} >/dev/null"
"""

#Heatmaps across conditions
rule plot_heatmaps_across:
	input:
		beds = [expand(os.path.join(OUTPUTDIR, "TFBS", "{{TF}}", "beds", "{{TF}}_" + condition + "_{state}.bed"), state=["bound", "unbound"]) for condition in CONDITION_IDS],
		tracks = expand(os.path.join(OUTPUTDIR, "bias_correction", "{condition}_corrected.bw"), condition=CONDITION_IDS)
	output:
		heatmap = os.path.join(OUTPUTDIR, "TFBS", "{TF}", "plots", "{TF}_heatmap_comparison.pdf")
	message: "Plotting heatmap for TF \"{wildcards.TF}\""
	params:
		beds = " ".join(["--TFBS {0}".format(" ".join(expand(os.path.join(OUTPUTDIR, "TFBS", "{{TF}}", "beds", "{{TF}}_" + condition + "_{state}.bed"), state=["bound", "unbound"]))) for condition in CONDITION_IDS]),
		#bed_labels = lambda wildcards, input: " ".join(["--TFBS_labels {0}".format(" ".join(["{0}_{1}".format(condition, state) for condition in CONDITION_IDS] for state in ["bound", "unbound"]))]),
		signal_labels = "--signal_labels " + " ".join(CONDITION_IDS),
		title = "--title '{TF} heatmap across conditions' "
	shell:
		"TOBIAS PlotHeatmap --signals {input.tracks} --output {output.heatmap} {params} --share_colorbar >/dev/null"



#----------------------------------------------------------------#
#--------------------------- Aggregates -------------------------#
#----------------------------------------------------------------#

#Comparison between bound/unbound sets of individual TFs
rule plot_aggregate_within:
	input: 
		TFBS = [os.path.join(OUTPUTDIR, "TFBS", "{TF}", "beds", "{TF}_all.bed")] + [os.path.join(OUTPUTDIR, "TFBS", "{TF}", "beds", "{TF}_{condition}_" + state + ".bed") for state in ["bound", "unbound"]],
		signals = [os.path.join(OUTPUTDIR, "bias_correction", "{condition}_" + state + ".bw") for state in ["uncorrected", "expected", "corrected"]],
	output:
		os.path.join(OUTPUTDIR, "TFBS", "{TF}", "plots", "{TF}_{condition}_aggregate.pdf")
	message: "Plotting split between bound/unbound around TFBS for TF \"{wildcards.TF}\" in condition \"{wildcards.condition}\""
	params:
		"--title 'Bias correction and split for {TF} in condition {condition}'",
		"--share_y rows",
		"--plot_boundaries",
	shell:
		"TOBIAS PlotAggregate --TFBS {input.TFBS} --signals {input.signals} --output {output} {params} >/dev/null "


#Aggregates across conditions for all and for bound subsets
rule plot_aggregate_across:
	input: 
		TFBS_all = os.path.join(OUTPUTDIR, "TFBS", "{TF}", "beds", "{TF}_all.bed"),
		TFBS_bound = expand(os.path.join(OUTPUTDIR, "TFBS", "{{TF}}", "beds", "{{TF}}_{condition}_bound.bed"), condition=CONDITION_IDS),
		signals = expand(os.path.join(OUTPUTDIR, "bias_correction", "{condition}_corrected.bw"), condition=CONDITION_IDS),
	output: 
		all_compare = os.path.join(OUTPUTDIR, "TFBS", "{TF}", "plots", "{TF}_aggregate_comparison_all.pdf"),
		bound_compare = os.path.join(OUTPUTDIR, "TFBS", "{TF}", "plots", "{TF}_aggregate_comparison_bound.pdf")
	priority: 2
	params: 
		"--title {0}".format("{TF}"),
		"--plot_boundaries",
		"--share_y both",
	message: "Plotting comparison of cutsite signals for \"{wildcards.TF}\" between conditions"
	shell:
		"TOBIAS PlotAggregate --TFBS {input.TFBS_all} --signals {input.signals} --output {output.all_compare} {params} >/dev/null; "
		"TOBIAS PlotAggregate --TFBS {input.TFBS_bound} --signals {input.signals} --output {output.bound_compare} {params}  >/dev/null;"


#----------------------------------------------------------------#
#-------------------- Join pdfs from all TFs --------------------#
#----------------------------------------------------------------#

rule join_pdfs:
	input:
		expand(os.path.join(OUTPUTDIR, "TFBS", "{TF}", "plots", "{TF}_{{plotname}}.pdf"), TF=TF_IDS)
	output:
		os.path.join(OUTPUTDIR, "overview", "all_{plotname}.pdf")
	message: "Joining {wildcards.plotname} plots from all TFs"
	shell:
		"TOBIAS MergePDF --input {input} --output {output} >/dev/null"
	